{"version":3,"sources":["webpack://amisEditor/./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js"],"names":[],"mappings":"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","file":"amisEditor.common.76.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\r\n    comments: {\r\n        blockComment: ['/*', '*/'],\r\n        lineComment: '//'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/'),\r\n            end: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.scss',\r\n    ws: '[ \\t\\n\\r\\f]*',\r\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    tokenizer: {\r\n        root: [{ include: '@selector' }],\r\n        selector: [\r\n            { include: '@comments' },\r\n            { include: '@import' },\r\n            { include: '@variabledeclaration' },\r\n            { include: '@warndebug' },\r\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\r\n            [\r\n                '[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\r\n                { token: 'keyword', next: '@keyframedeclaration' }\r\n            ],\r\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\r\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\r\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@controlstatement' },\r\n            { include: '@selectorname' },\r\n            ['[&\\\\*]', 'tag'],\r\n            ['[>\\\\+,]', 'delimiter'],\r\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }]\r\n        ],\r\n        selectorbody: [\r\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\r\n            { include: '@selector' },\r\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\r\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        selectorname: [\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\r\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\r\n        ],\r\n        selectorattribute: [\r\n            { include: '@term' },\r\n            [']', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        term: [\r\n            { include: '@comments' },\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@functioninvocation' },\r\n            { include: '@numbers' },\r\n            { include: '@strings' },\r\n            { include: '@variablereference' },\r\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\r\n            { include: '@name' },\r\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\r\n            [',', 'delimiter'],\r\n            ['!default', 'literal'],\r\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }]\r\n        ],\r\n        rulevalue: [\r\n            { include: '@term' },\r\n            ['!important', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        nestedproperty: [\r\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\r\n            { include: '@comments' },\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        warndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\r\n        import: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\r\n        variabledeclaration: [\r\n            // sass variables\r\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']\r\n        ],\r\n        urldeclaration: [\r\n            { include: '@strings' },\r\n            ['[^)\\r\\n]+', 'string'],\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        parenthizedterm: [\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\r\n        ],\r\n        declarationbody: [\r\n            { include: '@term' },\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        extendbody: [\r\n            { include: '@selectorname' },\r\n            ['!optional', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        variablereference: [\r\n            // sass variable reference\r\n            ['\\\\$@identifier', 'variable.ref'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }] // sass var resolve\r\n        ],\r\n        variableinterpolation: [\r\n            { include: '@variablereference' },\r\n            ['}', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        comments: [\r\n            ['\\\\/\\\\*', 'comment', '@comment'],\r\n            ['\\\\/\\\\/+.*', 'comment']\r\n        ],\r\n        comment: [\r\n            ['\\\\*\\\\/', 'comment', '@pop'],\r\n            ['.', 'comment']\r\n        ],\r\n        name: [['@identifier', 'attribute.value']],\r\n        numbers: [\r\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\r\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']\r\n        ],\r\n        units: [\r\n            [\r\n                '(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\r\n                'number',\r\n                '@pop'\r\n            ]\r\n        ],\r\n        functiondeclaration: [\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }]\r\n        ],\r\n        mixindeclaration: [\r\n            // mixin with parameters\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            // mixin without parameters\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        parameterdeclaration: [\r\n            ['\\\\$@identifier@ws:', 'variable.decl'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            [',', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        includedeclaration: [\r\n            { include: '@functioninvocation' },\r\n            ['@identifier', 'meta'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        keyframedeclaration: [\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }]\r\n        ],\r\n        keyframebody: [\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        controlstatement: [\r\n            [\r\n                '[@](if|else|for|while|each|media)',\r\n                { token: 'keyword.flow', next: '@controlstatementdeclaration' }\r\n            ]\r\n        ],\r\n        controlstatementdeclaration: [\r\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        functionbody: [\r\n            ['[@](return)', { token: 'keyword' }],\r\n            { include: '@variabledeclaration' },\r\n            { include: '@term' },\r\n            { include: '@controlstatement' },\r\n            [';', 'delimiter'],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        functioninvocation: [['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }]],\r\n        functionarguments: [\r\n            ['\\\\$@identifier@ws:', 'attribute.name'],\r\n            ['[,]', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        strings: [\r\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\r\n            [\"~?'\", { token: 'string.delimiter', next: '@stringendquote' }]\r\n        ],\r\n        stringenddoublequote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ],\r\n        stringendquote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            [\"'\", { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":""}